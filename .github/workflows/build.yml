name: Build

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
    
env:
  BUILD_TYPE: Release

jobs:

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
      if: github.event_name != 'push'
    - name: Set tag name
      id: tag
      run: |
        if [[ "${{ github.event_name }}" != "push" ]]; then
          tag=v$(date +%Y%m%d.%H%M%S)
        else
          tag=$(basename "${{ github.ref }}")
        fi
        echo "tag=$tag" >> $GITHUB_OUTPUT
    - name: Create Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: |
        tag="${{ steps.tag.outputs.tag }}"
        body=""
        gh release create --draft "$tag" --title "$tag" --notes "$body"

  build_web:
  
    name: Build (Web)
    needs: [release]
    runs-on: ubuntu-latest
  
    steps:
        
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    - name: Install prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -y libpulse-dev libgl1-mesa-dev
  
    - name: Cache LLVM host
      id: cache-llvm-host
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/build_llvm
        key: web-cache-llvm-host
  
    - name: Build LLVM host
      if: steps.cache-llvm-host.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.7/llvm-project-15.0.7.src.tar.xz
        tar -xf llvm-project-15.0.7.src.tar.xz
        cmake -B ${{github.workspace}}/build_llvm -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLLVM_TARGETS_TO_BUILD=WebAssembly -DLLVM_ENABLE_PROJECTS="clang" -S llvm-project-15.0.7.src/llvm
        cmake --build ${{github.workspace}}/build_llvm --config ${{env.BUILD_TYPE}} -- llvm-tblgen
        cmake --build ${{github.workspace}}/build_llvm --config ${{env.BUILD_TYPE}} -- clang-tblgen
      
    - name: Set up emsdk
      run: |
        git clone https://github.com/emscripten-core/emsdk.git ${{github.workspace}}/emsdk
        ${{github.workspace}}/emsdk/emsdk install 3.1.31
        ${{github.workspace}}/emsdk/emsdk activate 3.1.31
  
    - name: Configure
      run: |
        source ${{github.workspace}}/emsdk/emsdk_env.sh
        emcmake cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLLVM_TABLEGEN=${{github.workspace}}/build_llvm/bin/llvm-tblgen -DCLANG_TABLEGEN=${{github.workspace}}/build_llvm/bin/clang-tblgen
    
    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target Ardens
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target ArdensPlayer
        mkdir ${{github.workspace}}/Ardens_web
        
    - name: Create zip file
      run: |
        cp ${{github.workspace}}/build/Ardens.js ${{github.workspace}}/Ardens_web
        cp ${{github.workspace}}/build/Ardens.wasm ${{github.workspace}}/Ardens_web
        cp ${{github.workspace}}/build/ArdensPlayer.js ${{github.workspace}}/Ardens_web
        cp ${{github.workspace}}/build/ArdensPlayer.wasm ${{github.workspace}}/Ardens_web
        cp ${{github.workspace}}/src/Ardens.html ${{github.workspace}}/Ardens_web/index.html
        cp ${{github.workspace}}/src/ArdensPlayer.html ${{github.workspace}}/Ardens_web/player.html
        cd ${{github.workspace}}/Ardens_web
        zip -r ${{github.workspace}}/Ardens_web.zip *
        
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        folder: ${{github.workspace}}/Ardens_web
  
    - name: Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release upload "${{ needs.release.outputs.tag }}" "${{github.workspace}}/Ardens_web.zip"

  build_linux:
  
    name: Build (Linux)
    needs: [release]
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    - name: Install prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -y libpulse-dev libgl1-mesa-dev libegl1-mesa-dev mesa-common-dev xorg-dev libasound-dev libxi-dev libx11-dev libfuse2
  
    - name: Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  
    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target ArdensPlayer
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target Ardens
        
    - name: Build AppImages
      run: |
        wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        mkdir AppDir AppDirPlayer
        cp ${{github.workspace}}/build/Ardens AppDir
        cp ${{github.workspace}}/build/ArdensPlayer AppDirPlayer
        cp src/Ardens.desktop AppDir
        cp src/ArdensPlayer.desktop AppDirPlayer
        cp img/ardens.png AppDir
        cp img/ardens.png AppDirPlayer
        #ln -s Ardens AppDir/AppRun
        ln -s ArdensPlayer AppDirPlayer/AppRun
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
        ./linuxdeploy-x86_64.AppImage --appdir AppDirPlayer --output appimage
        zip Ardens_linux.zip Ardens*.AppImage
  
    - name: Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release upload "${{ needs.release.outputs.tag }}" "Ardens_linux.zip"

  build_windows_x86:
  
    name: Build (Windows x86)
    needs: [release]
    runs-on: windows-latest
  
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
  
    - name: Configure
      run: cmake -B ${{github.workspace}}/build -A Win32 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  
    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target Ardens
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target ArdensPlayer
        cmake -E copy "${{github.workspace}}/build/${{env.BUILD_TYPE}}/Ardens.exe" "Ardens.exe"
        cmake -E copy "${{github.workspace}}/build/${{env.BUILD_TYPE}}/ArdensPlayer.exe" "ArdensPlayer.exe"
        cmake -E tar "cfv" "Ardens_win32.zip" --format=zip "Ardens.exe" "ArdensPlayer.exe"
  
    - name: Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release upload "${{ needs.release.outputs.tag }}" "Ardens_win32.zip"
  
  build_windows_x64:
  
    name: Build (Windows x64)
    needs: [release]
    runs-on: windows-latest
  
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
  
    - name: Configure
      run: cmake -B ${{github.workspace}}/build -A x64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  
    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target Ardens
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target ArdensPlayer
        cmake -E copy "${{github.workspace}}/build/${{env.BUILD_TYPE}}/Ardens.exe" "Ardens.exe"
        cmake -E copy "${{github.workspace}}/build/${{env.BUILD_TYPE}}/ArdensPlayer.exe" "ArdensPlayer.exe"
        cmake -E tar "cfv" "Ardens_win64.zip" --format=zip "Ardens.exe" "ArdensPlayer.exe"
  
    - name: Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release upload "${{ needs.release.outputs.tag }}" "Ardens_win64.zip"
  
  #build_macos:
  #
  #  runs-on: macos-latest
  #
  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v3
  #    with:
  #      submodules: 'recursive'
  #
  #  - name: Configure
  #    run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  #
  #  - name: Build
  #    run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  #
  #  - name: Upload Build Artifact
  #    uses: actions/upload-artifact@v3.1.2
  #    with:
  #      name: Release_MacOS
  #      path: ${{github.workspace}}/build/Ardens
